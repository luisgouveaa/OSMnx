### Visualização de Isócronos para tempo de percurso a partir de um determinado local

# Importação das bibliotecas necessárias
import geopandas as gpd
import matplotlib.pyplot as plt
import networkx as nx
import osmnx as ox
from shapely.geometry import LineString
from shapely.geometry import Point
from shapely.geometry import Polygon
import matplotlib.patches as mpatches

# Definição da área de estudo e obtenção da rede de ruas
# configurar o local, tipo de rede, tempos de viagem e velocidade de viagem
place = "Campo Grande, Rio de Janeiro, Brasil"
network_type = "drive"
trip_times = [5, 10, 15, 20, 25]  # em minutos
travel_speed = 30  # Velocidade média em km/h
# baixar a rede de rua
G = ox.graph_from_place(place, network_type=network_type)

# Geocodifique o endereço do local desejado
address = "Hospital Rocha Faria"
location = ox.geocode(address)

# Obtenha as coordenadas geográficas
latitude = location[0]
longitude = location[1]

# encontre o nó mais central e então projete o graph para UTM
gdf_nodes = ox.graph_to_gdfs(G, edges=False)
center_node = ox.distance.nearest_nodes(G, longitude, latitude)
G = ox.project_graph(G)

# adicione um atributo de borda para o tempo em minutos necessário para atravessar cada borda
meters_per_minute = travel_speed * 1000 / 60  # km//h para km/min
for _, _, _, data in G.edges(data=True, keys=True):
    data["time"] = data["length"] / meters_per_minute

# obter uma cor para cada isócrona
iso_colors = ox.plot.get_colors(n=len(trip_times), cmap="plasma", start=0, return_hex=True)

# pinte os nós de acordo com a isócrona e depois desenhe a rede de ruas
node_colors = {}
for trip_time, color in zip(sorted(trip_times, reverse=True), iso_colors):
    subgraph = nx.ego_graph(G, center_node, radius=trip_time, distance="time")
    for node in subgraph.nodes():
        node_colors[node] = color
nc = [node_colors[node] if node in node_colors else "none" for node in G.nodes()]
ns = [15 if node in node_colors else 0 for node in G.nodes()]
fig, ax = ox.plot_graph(
    G,
    node_color=nc,
    node_size=ns,
    node_alpha=0.8,
    edge_linewidth=0.2,
    edge_color="#999999",
    dpi=600
)

# faça os polígonos isócronos
def make_iso_polys(G, edge_buff=25, node_buff=50, infill=False):
    isochrone_polys = []
    for trip_time in sorted(trip_times, reverse=True):
        subgraph = nx.ego_graph(G, center_node, radius=trip_time, distance="time")

        node_points = [Point((data["x"], data["y"])) for node, data in subgraph.nodes(data=True)]
        nodes_gdf = gpd.GeoDataFrame({"id": list(subgraph.nodes)}, geometry=node_points)
        nodes_gdf = nodes_gdf.set_index("id")

        edge_lines = []
        for n_fr, n_to in subgraph.edges():
            f = nodes_gdf.loc[n_fr].geometry
            t = nodes_gdf.loc[n_to].geometry
            edge_lookup = G.get_edge_data(n_fr, n_to)[0].get("geometry", LineString([f, t]))
            edge_lines.append(edge_lookup)

        n = nodes_gdf.buffer(node_buff).geometry
        e = gpd.GeoSeries(edge_lines).buffer(edge_buff).geometry
        all_gs = list(n) + list(e)
        new_iso = gpd.GeoSeries(all_gs).unary_union
        # tente preencher as áreas ao redor para que as formas pareçam sólidas e
        # blocos sem espaço em branco dentro deles
        if infill:
            new_iso = Polygon(new_iso.exterior)
        isochrone_polys.append(new_iso)
    return isochrone_polys

isochrone_polys = make_iso_polys(G, edge_buff=25, node_buff=0, infill=True)
gdf = gpd.GeoDataFrame(geometry=isochrone_polys)

# plote a rede e adicione isócronas como patches de polígonos coloridos
fig, ax = ox.plot_graph(
    G,
    show=False,
    close=False,
    edge_color="#999999",
    edge_alpha=0.2,
    node_size=0,
    dpi=600
)
gdf.plot(ax=ax, color=iso_colors, ec="none", alpha=0.6, zorder=-1)

# Crie uma lista de objetos de patch com as cores dos isócronos
legend_labels = ['25 minutos', '20 minutos', '15 minutos', '10 minutos', '5 minutos']
legend_patches = []
for color, label in zip(iso_colors, legend_labels):
    legend_patches.append(mpatches.Patch(color=color, label=label))

# Adicione a legenda com os objetos de patch
plt.legend(handles=legend_patches, title='Tempo de Percurso', loc='lower left', bbox_to_anchor=(0.0, 1.01), title_fontsize='12', fontsize='10')

plt.show()
